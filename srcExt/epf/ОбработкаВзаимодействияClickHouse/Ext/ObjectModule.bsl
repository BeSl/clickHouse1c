#Область ПрограммныйИнтерфейс
Функция ШаблоныОпераций() Экспорт
	
	ОперацииБД = Новый Соответствие;
	ОперацииБД.Вставить("Выборка данных", 
	"SELECT [DISTINCT] 
	|	[COLUMS] 
	|FROM 
	|	[dbName].[tableName] 
	|[WHERE] 
	|[GROUP BY]
	|[FORMAT]");
	
	ОперацииБД.Вставить("Вставка данных", 
	"INSERT INTO [db].[table] ([COLUMS]) VALUES ([VALUES])");
	
	ОперацииБД.Вставить("Создать таблицу", 
	"CREATE TABLE [IF NOT EXISTS] [dbName].[table_name] [ON CLUSTER]
	|(
	|	[COLUMS]
	|) [ENGINE]
	|[PRIMARY KEY]");
	
	ОперацииБД.Вставить("Создать Базу Данных", 
	"CREATE DATABASE [IF NOT EXISTS] [dbName] [ON CLUSTER]
	|[ENGINE]");

	Возврат ОперацииБД;
	
КонецФункции

Функция РеализованныеОперации() Экспорт
	
	Операции_CH = Новый Массив;
	
	Для каждого Операция из ШаблоныОпераций() Цикл
		Операции_CH.Добавить(Операция.Ключ);
	КонецЦикла;
	
	Возврат Операции_CH;
	
КонецФункции

Функция Запрос_CH(ПараметрыПодключения, ТекстЗапроса, ТипЗапроса) Экспорт
	
	HTTPСоеднинениеCH = ИнициализироватьHTTPСоединение(ПараметрыПодключения);
	ОтветПоЗапросу = Новый Структура("КодСостояния, ТелоОтвета", 400, "");
	
	Если ТипЗапроса = "get" Тогда
		Ответ = getЗапрос(HTTPСоеднинениеCH, ТекстЗапроса);
	ИначеЕсли ТипЗапроса = "post" Тогда
		Ответ = postЗапрос(HTTPСоеднинениеCH, ТекстЗапроса);
	Иначе
		ВызватьИсключение "Вызван неизвестный тип запроса";
	КонецЕсли;
	
	ОтветПоЗапросу.КодСостояния = Ответ.КодСостояния;
	ОтветПоЗапросу.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		
	Возврат ОтветПоЗапросу;
	
КонецФункции

Функция ТипыДанныхСтолбцов() Экспорт
	
	Возврат ТипыДанныхДляСтолбцовТаблиц();
	
КонецФункции

Функция ПараметрыЗапроса(ВариантЗапроса) Экспорт
	
	ПараметрыПоВариантуЗапроса = Новый Массив;
	
	Если ВариантЗапроса = "Создать Базу Данных" Тогда
		
		Для каждого тПараметр из ДвижкиБазДанных() Цикл
			ПараметрыПоВариантуЗапроса.Добавить(СтрШаблон("%1(%2)",тПараметр.Ключ, тПараметр.Значение));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыПоВариантуЗапроса;
	
КонецФункции

Функция ДвижкиБазДанных() Экспорт
	
	Движки = Новый Соответствие;
	Движки.Вставить("MySQL", "'host:port', ['database' | database], 'user', 'password'");
	Движки.Вставить("Lazy","'expiration_time_in_seconds'");
	Движки.Вставить("Atomic", "");
	Движки.Вставить("MaterializeMySQL", "'host:port', ['database' | database], 'user', 'password'");
	
	Возврат Движки;
	
КонецФункции

Функция ПараметрыДвижковТаблиц() Экспорт
	
	ПараметрыДвижков = Новый Соответствие;
	ПараметрыДвижков.Вставить("MergeTree", "");
	ПараметрыДвижков.Вставить("SummingMergeTree", "[columns]");
	ПараметрыДвижков.Вставить("AggregatingMergeTree", "");
	ПараметрыДвижков.Вставить("Kafka", "SETTINGS
    |kafka_broker_list = 'host:port',
    |kafka_topic_list = 'topic1,topic2,...',
    |kafka_group_name = 'group_name',
    |kafka_format = 'data_format'[,]
    |[kafka_row_delimiter = 'delimiter_symbol',]
    |[kafka_schema = '',]
    |[kafka_num_consumers = N,]
    |[kafka_max_block_size = 0,]
    |[kafka_skip_broken_messages = N,]
    |[kafka_commit_every_batch = 0,]
    |[kafka_thread_per_consumer = 0]");
	
	ПараметрыДвижков.Вставить("RabbitMQ ", "SETTINGS
    |rabbitmq_host_port = 'host:port',
    |rabbitmq_exchange_name = 'exchange_name',
    |rabbitmq_format = 'data_format'[,]
    |[rabbitmq_exchange_type = 'exchange_type',]
    |[rabbitmq_routing_key_list = 'key1,key2,...',]
    |[rabbitmq_row_delimiter = 'delimiter_symbol',]
    |[rabbitmq_schema = '',]
    |[rabbitmq_num_consumers = N,]
    |[rabbitmq_num_queues = N,]
    |[rabbitmq_queue_base = 'queue',]
    |[rabbitmq_deadletter_exchange = 'dl-exchange',]
    |[rabbitmq_persistent = 0,]
    |[rabbitmq_skip_broken_messages = N,]
    |[rabbitmq_max_block_size = N,]
    |[rabbitmq_flush_interval_ms = N]");
	//ПараметрыДвижков.Вставить("", "");
	Возврат ПараметрыДвижков;
	
КонецФункции

Функция ИнформацияПоВсемБазамСУБД(ПараметрыПодключения) Экспорт
	
	ТекстЗапроса = "Select * FROM system.columns FORMAT JSON";
	РезультатЗапроса = ВыполнитьПроизвольныйЗапрос(ПараметрыПодключения, ТекстЗапроса, "post");
	
	Если РезультатЗапроса.КодСостояния <> 200 Тогда
		Возврат "";
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(РезультатЗапроса.телоОтвета);
	Структура = ПрочитатьJSON(Чтение);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	Для Каждого КолонкаТаблицы  из Структура.meta Цикл
		ТаблицаРезультат.Колонки.Добавить(КолонкаТаблицы.name);
	КонецЦикла;	
	
	Для каждого СтрокаТаблицы из Структура.data Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаРезультат.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#Область СправочнаяИнформацияПодсказки
Функция ВстроенныеТипыClickHouse() Экспорт
	
	возврат ТипыДанныхДляСтолбцовТаблиц();	
	
КонецФункции
#КонецОбласти

Функция ВыполнитьПроизвольныйЗапрос(ПараметрыПодключения, ТекстЗапроса, ТипЗапроса) Экспорт
	
	Возврат Запрос_CH(ПараметрыПодключения, ТекстЗапроса, ТипЗапроса);
	
КонецФункции

Функция ЗапросСписокВсехБД(ПараметрыПодключения) Экспорт
	
	ТекстЗапроса = "SHOW DATABASES Format JSON";
	РезультатЗапроса = Запрос_CH(ПараметрыПодключения, ТекстЗапроса, "post");
	
	Если РезультатЗапроса.КодСостояния = 200 Тогда
		Возврат РезультатЗапроса.ТелоОтвета;
	КонецЕсли;
	
	Сообщить("Ошибка Код "+РезультатЗапроса.КодСостояния);
	Возврат РезультатЗапроса.ТелоОтвета;
	
КонецФункции

Функция ЗапросСписокТаблицБД(ПараметрыПодключения, ИмяБД = "") Экспорт
	
	ТекстЗапроса = СтрШаблон("SHOW TABLES FROM %1 FORMAT JSON", ИмяБД);
	РезультатЗапроса = Запрос_CH(ПараметрыПодключения, ТекстЗапроса, "post");
	
	Если РезультатЗапроса.КодСостояния = 200 Тогда
		Возврат РезультатЗапроса.ТелоОтвета;
	КонецЕсли;
	
	Сообщить("Ошибка Код "+РезультатЗапроса.КодСостояния);
	Возврат РезультатЗапроса.ТелоОтвета;
	
КонецФункции

Функция СписокАгрегатныхФункций(ПараметрыПодключения) Экспорт
	
	ТекстЗапроса = "Select name FROM system.functions WHERE is_aggregate = 1 ORDER BY name FORMAT JSON";
	Результат = Запрос_CH(ПараметрыПодключения, ТекстЗапроса, "post");
	
	Если Результат.КодСостояния <> 200 Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ЧтениеJson = Новый ЧтениеJSON;
	ЧтениеJson.УстановитьСтроку(Результат.ТелоОтвета);
	ОтветСтруктурой = ПрочитатьJSON(ЧтениеJson);
	
	СписокФункций = Новый Массив;
	
	Для каждого АФункция из ОтветСтруктурой.data Цикл
		СписокФункций.Добавить(АФункция.name);
	КонецЦикла;
	
	возврат СписокФункций;
	
КонецФункции

Функция ДвижкиТаблиц(ПараметрыПодключения) Экспорт
	
	ТекстЗапроса = "SELECT * FROM system.table_engines FORMAT JSON";
	Результат = Запрос_CH(ПараметрыПодключения, ТекстЗапроса, "post");
	
	Если Результат.КодСостояния <> 200 Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ЧтениеJson = Новый ЧтениеJSON;
	ЧтениеJson.УстановитьСтроку(Результат.ТелоОтвета);
	ОтветСтруктурой = ПрочитатьJSON(ЧтениеJson);
	
	ДвижкиТаблиц = Новый Массив;
	
	Для каждого АФункция из ОтветСтруктурой.data Цикл
		ДвижкиТаблиц.Добавить(АФункция.name);
	КонецЦикла;
	
	возврат ДвижкиТаблиц;
	
	
КонецФункции
#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
Функция ТипыДанныхДляСтолбцовТаблиц()
	
	ТипыДанныхКХ = Новый Массив;
	ТипыДанныхКХ.Добавить("UInt8"); 
	ТипыДанныхКХ.Добавить("UInt16"); 
	ТипыДанныхКХ.Добавить("UInt32"); 
	ТипыДанныхКХ.Добавить("UInt64"); 
	ТипыДанныхКХ.Добавить("Int8"); 
	ТипыДанныхКХ.Добавить("Int16"); 
	ТипыДанныхКХ.Добавить("Int32"); 
	ТипыДанныхКХ.Добавить("Int64");
	ТипыДанныхКХ.Добавить("Float32"); 
	ТипыДанныхКХ.Добавить("Float64");
	ТипыДанныхКХ.Добавить("Decimal");
	ТипыДанныхКХ.Добавить("Boolean");
	ТипыДанныхКХ.Добавить("String");
	ТипыДанныхКХ.Добавить("FixedString(N)");
	ТипыДанныхКХ.Добавить("UUID");
	ТипыДанныхКХ.Добавить("Date");
	ТипыДанныхКХ.Добавить("DateTime");
	ТипыДанныхКХ.Добавить("DateTime64");
	ТипыДанныхКХ.Добавить("Enum");
	ТипыДанныхКХ.Добавить("LowCardinality");
	ТипыДанныхКХ.Добавить("Array(T)");
	ТипыДанныхКХ.Добавить("Nullable");
	ТипыДанныхКХ.Добавить("SimpleAggregateFunction");	
	
	Возврат ТипыДанныхКХ;	
	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ИнициализироватьHTTPСоединение(ПараметрыПодключения)
	
	АдресСервера = "";
	Порт = "";
	Логин = "";
	Пароль = "";
	
	ПараметрыПодключения.Свойство("АдресСервера", АдресСервера);
	ПараметрыПодключения.Свойство("Порт", Порт);
	ПараметрыПодключения.Свойство("Логин", Логин);
	ПараметрыПодключения.Свойство("Пароль", Пароль);
	Возврат Новый HTTPСоединение(АдресСервера, Порт, Логин, Пароль);
	
КонецФункции

Функция getЗапрос(HTTPСоединениеClickHouse, ТекстЗапроса) 
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-ClickHouse-User", "user1");
	Заголовки.Вставить("X-ClickHouse-Key", "<password>");
	
	HTTPЗапросВнБД = Новый HTTPЗапрос("?query=" + ТекстЗапроса, Заголовки);
	HTTPОтветВнБД = HTTPСоединениеClickHouse.Получить(HTTPЗапросВнБД);
	
	Возврат HTTPОтветВнБД;	
	
КонецФункции

Функция postЗапрос(ПодключениеClickHouse, ТекстЗапроса) 
										   
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	ФайлЗапрос = Новый ТекстовыйДокумент();
	ФайлЗапрос.УстановитьТекст(ТекстЗапроса);
	ФайлЗапрос.Записать(ИмяВремФайла, КодировкаТекста.UTF8);
	
	HTTPЗапросВнБД = Новый HTTPЗапрос();
	HTTPЗапросВнБД.УстановитьИмяФайлаТела(ИмяВремФайла);
	
	HTTPОтветВнБД = ПодключениеClickHouse.ОтправитьДляОбработки(HTTPЗапросВнБД);
	
	Возврат HTTPОтветВнБД;
	
КонецФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти