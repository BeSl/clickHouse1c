
#Область ОписаниеПеременных
Перем кСтолбецБазы;
Перем кБазаДанных;
Перем кТаблицаБазы;

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыПодключенияПоУмолчанию());
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Секции запроса выборки" Тогда
		СобратьЗапросПоСекциям(Параметр, Источник);	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗапросКБД(Команда)
	ИсполнитьЗапросК_CH(ПараметрыПодключения());
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтруктуруБДСервера(Команда)
	ЗаполнитьДеревоДаннымиСУБД(ПараметрыПодключения());
КонецПроцедуры

&НаКлиенте
Процедура ЗапросКТаблице(Команда)
	ЗаготовкаЗапросаКТаблице(ПараметрыПодключения());
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБазуДанных(Команда)
	ОткрытьФорму("ВнешняяОбработка.ClickHouse1cClient.Форма.ФормаСозданиеБД", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТаблицу(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	тДанные = СтруктураБазСервера.НайтиПоИдентификатору(ТекущийЭлемент.ТекущаяСтрока);
	Если тДанные.ПолучитьРодителя() = Неопределено Тогда
		dbName = тДанные.Имя;
	Иначе
		dbName = тДанные.ПолучитьРодителя().Имя;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("bdName", dbName);	
	ПараметрыФормы.Вставить("ПараметрыПодключения", ПараметрыПодключения());		
	
	ОткрытьФорму("ВнешняяОбработка.ClickHouse1cClient.Форма.ФормаCreateTable", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставкаДанных(Команда)
	
	Оповестить("Секции запроса выборки",НовыЙ Структура, "Вставка данных");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСхемуДляНастройки(Команда)
	ЗаполнитьПараметрыСКД();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПараметрыПодключения()
	            
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("АдресСервера", АдресСервера);
	ПараметрыПодключения.Вставить("Порт", Порт);
	ПараметрыПодключения.Вставить("Логин", Логин);
	ПараметрыПодключения.Вставить("Пароль", Пароль);	
	
	Возврат ПараметрыПодключения;
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаКлиенте
Процедура ЗаготовкаЗапросаКТаблице(ПараметрыПодключения)
	
	тДанные = СтруктураБазСервера.НайтиПоИдентификатору(ТекущийЭлемент.ТекущаяСтрока);
	Таблица = тДанные.Имя;
	БД = тДанные.ПолучитьРодителя().Имя;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокСтолбцов",  СтолбцыТекущейТаблицы());
	ПараметрыФормы.Вставить("тПодключение", ПараметрыПодключения());
	ПараметрыФормы.Вставить("ИмяТаблицы", Таблица);
	ПараметрыФормы.Вставить("БД", БД);
	
	ОткрытьФорму("ВнешняяОбработка.ClickHouse1cClient.Форма.ФормаКонструкторSelect", ПараметрыФормы, ЭтотОбъект);
	 
КонецПроцедуры

&НаСервере
Функция СтолбцыТекущейТаблицы()
	тДанные = СтруктураБазСервера.НайтиПоИдентификатору(ТекущийЭлемент.ТекущаяСтрока);

	ТаблицаОписанияСтолбцов = Новый ТаблицаЗначений;
	ТаблицаОписанияСтолбцов.Колонки.Добавить("ИмяСтолбца");
	ТаблицаОписанияСтолбцов.Колонки.Добавить("ТипДанных");
	ТаблицаОписанияСтолбцов.Колонки.Добавить("Синоним");
	ТаблицаОписанияСтолбцов.Колонки.Добавить("Выбрать");
	
	Для Каждого Столбец из тДанные.ПолучитьЭлементы() Цикл
		новСтолбец = ТаблицаОписанияСтолбцов.Добавить();
		новСтолбец.ИмяСтолбца = Столбец.Имя;
		новСтолбец.Синоним = Столбец.Имя;
		новСтолбец.Выбрать = Истина;
		новСтолбец.ТипДанных = Столбец.ТипСтолбца;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОписанияСтолбцов, Новый УникальныйИдентификатор);	
	
КонецФункции

&НаСервере
Процедура ИсполнитьЗапросК_CH(ПараметрыПодключения)
	
	ТипЗапроса = "post";
	ОтветПоВыборке = ОбработкаОбъект().ВыполнитьПроизвольныйЗапрос(ПараметрыПодключения, ТекстЗапросаВыборки, ТипЗапроса);
	Элементы.ДекорацияКодСостояния.Заголовок = "Код состояния " + ОтветПоВыборке.КодСостояния;
	
	Если СтрНачинаетсяС(нРег(СокрЛП(ТекстЗапросаВыборки)), "select") Тогда
		Попытка
			ЧтениеJS = Новый ЧтениеJSON;
			ЧтениеJS.УстановитьСтроку(ОтветПоВыборке.ТелоОтвета);
			ОтветСтруктурой = ПрочитатьJSON(ЧтениеJS);
			ПодготовитьМакетСКД(ОтветСтруктурой);
			ЭтаФорма.ТекущийЭлемент = Элементы.Группа8;
		Исключение
			Сообщить(ОтветПоВыборке.ТелоОтвета);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьМакетСКД(ОтветСтруктурой)
	
	метаИнформацияСЗапроса = ОтветСтруктурой.meta;
	
	схемаКомпоновки = ОбработкаОбъект().ПолучитьМакет("СхемаКомпоновкиДляПросмотраДанных");
	
	ПоляСхемы = схемаКомпоновки.НаборыДанных.НаборДанных1.Поля;
	ЭлементыВыбора = схемаКомпоновки.ВариантыНастроек.Основной.Настройки.Выбор.Элементы;
	табДанных = Новый ТаблицаЗначений;
	
	Для каждого мИнф из метаИнформацияСЗапроса Цикл
		
		НовоеПоле = ПоляСхемы.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок = мИнф.name; 
		НовоеПоле.Поле = мИнф.name;  
		НовоеПоле.ПутьКДанным = мИнф.name;
		
		ПолеКД = ЭлементыВыбора.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКД.Заголовок = мИнф.name;
		ПолеКД.Использование = Истина;
		ПолеКД.Поле =  Новый ПолеКомпоновкиДанных(мИнф.name);
		
		табДанных.Колонки.Добавить(мИнф.name);
	КонецЦикла;
	
	Для каждого тДанные из ОтветСтруктурой.data Цикл
		ЗаполнитьЗначенияСвойств(табДанных.Добавить(), тДанные);
	КонецЦикла;
	
	
	
	СформироватьВтаблДокРезультатСКДНаСервере(схемаКомпоновки, табДанных);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьВтаблДокРезультатСКДНаСервере(Схема, ТаблицаДляНабора)
	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Схема.ВариантыНастроек.Основной.Настройки);
	
	внНаборДанных = Новый Структура;
	внНаборДанных.Вставить("табДанных", ТаблицаДляНабора);
	
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, внНаборДанных,,Истина);
	
    докРезультатЗапроса.Очистить();

	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(докРезультатЗапроса);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДаннымиСУБД(ПараметрыПодключения)
	
	ОбщаяТаблицаСУБД = ОбработкаОбъект().ИнформацияПоВсемБазамСУБД(ПараметрыПодключения);
	
	Если ПустаяСтрока(СокрЛП(ОбщаяТаблицаСУБД)) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураБазСервера.ПолучитьЭлементы().Очистить();
	
	СписокБаз = ОбщаяТаблицаСУБД.Скопировать();
	СписокБаз.Свернуть("database");
	
	ТаблицыБД = ОбщаяТаблицаСУБД.Скопировать();
	ТаблицыБД.Свернуть("database, table");	
	Для каждого БазаДанных из СписокБаз Цикл
		БД = СтруктураБазСервера.ПолучитьЭлементы().Добавить();	
		БД.Имя = БазаДанных.database;
		БД.Картинка = кБазаДанных;
		ЗаполнитьТаблицыПоВыборке(ОбщаяТаблицаСУБД, ТаблицыБД, БД);
	КонецЦикла;
	
	ВыборкаЗапроса = ОбработкаОбъект().ЗапросСписокВсехБД(ПараметрыПодключения);
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ВыборкаЗапроса);
	Структура = ПрочитатьJSON(Чтение);
	
	Для каждого тТаблица из Структура.data Цикл
		Если СписокБаз.НайтиСтроки(Новый Структура("database", тТаблица.name)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		БД = СтруктураБазСервера.ПолучитьЭлементы().Добавить();	
		БД.Имя = тТаблица.name;
		БД.Картинка = кБазаДанных;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыПоВыборке(ТаблицаСУБД, ТаблицыБД, ТекущаяБД)

	Для каждого текТаблица из ТаблицыБД.НайтиСтроки(Новый Структура("database", ТекущаяБД.Имя)) Цикл
		Таблица = ТекущаяБД.ПолучитьЭлементы().Добавить();
		Таблица.Имя = текТаблица.table;
		Таблица.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
		
		Для каждого СтолбцыТаблицы из ТаблицаСУБД.НайтиСтроки(Новый Структура("database, table", ТекущаяБД.Имя, Таблица.Имя)) Цикл
			ОписаниеСтолбца = Таблица.ПолучитьЭлементы().Добавить();
			ОписаниеСтолбца.Имя = СтолбцыТаблицы.name;
			ОписаниеСтолбца.Картинка = кСтолбецБазы;
			ОписаниеСтолбца.ТипСтолбца = СтолбцыТаблицы.type;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

Функция ПараметрыПодключенияПоУмолчанию()
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("АдресСервера", "192.168.1.102");
	ПараметрыПодключения.Вставить("Порт", 8123);
	ПараметрыПодключения.Вставить("Логин", "default");
	ПараметрыПодключения.Вставить("Пароль", "");	
	
	Возврат ПараметрыПодключения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыСКД()
	
	тДанные = СтруктураБазСервера.НайтиПоИдентификатору(ТекущийЭлемент.ТекущаяСтрока);
	ИмяТаблицы = тДанные.Имя;
	
	схемаКомпоновки = ОбработкаОбъект().ПолучитьМакет("СхемаКомпоновкиДляПросмотраДанных");
	
	ПоляСхемы = схемаКомпоновки.НаборыДанных.НаборДанных1.Поля;
	ЭлементыВыбора = схемаКомпоновки.ВариантыНастроек.Основной.Настройки.Выбор.Элементы;
	ЭлементыОтбора = схемаКомпоновки.ВариантыНастроек.Основной.Настройки.Отбор.Элементы;
	
	Для Каждого тКолонка Из тДанные.ПолучитьЭлементы() Цикл
		
		НовоеПоле = ПоляСхемы.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок = тКолонка.Имя; 
		НовоеПоле.Поле = тКолонка.Имя;  
		НовоеПоле.ПутьКДанным = тКолонка.Имя;
		
		ПолеКД = ЭлементыВыбора.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКД.Заголовок = тКолонка.Имя;
		ПолеКД.Использование = Истина;
		ПолеКД.Поле =  Новый ПолеКомпоновкиДанных(тКолонка.Имя);
		
		ПолеОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(тКолонка.Имя);
		ПолеОтбора.ПравоеЗначение = тКолонка.Имя;
		ПолеОтбора.Использование = Ложь;
	КонецЦикла;
	
	НастройкиДляЗагрузки = схемаКомпоновки.ВариантыНастроек.Основной.Настройки;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(схемаКомпоновки);
	
	НастройкиМакета = схемаКомпоновки.ВариантыНастроек.Основной.Настройки;
	
	КомпоновкаОтчета.ЗагрузитьНастройки(НастройкиМакета);	
	КомпоновкаОтчета.Инициализировать(ИсточникДоступныхНастроек);	
		
КонецПроцедуры

&НаСервере
Процедура СобратьЗапросПоСекциям(СекцииЗапроса, ВидЗапроса)
	
	ШаблонЗапроса = ОбработкаОбъект().ШаблоныОпераций()[ВидЗапроса];

	Для каждого ОписаниеСекцииЗапроса из СекцииЗапроса Цикл	
		Если ТипЗнч(ОписаниеСекцииЗапроса.Значение) = Тип("Массив") Тогда
			СтрокаСекции = Символы.Таб + СтрСоединить(ОписаниеСекцииЗапроса.Значение,  " , "+Символы.ПС);
		Иначе
			СтрокаСекции = ОписаниеСекцииЗапроса.Значение;
		КонецЕсли;
		
		ФорматированныйКлюч = СтрЗаменить(ОписаниеСекцииЗапроса.Ключ, "_", " "); 
		ВсяСекция = СтрокаСекции;
		
		Если СтрЗаканчиваетсяНа(ФорматированныйКлюч, "об") Тогда
			ФорматированныйКлюч = СтрЗаменить(ФорматированныйКлюч, "об", "");
			Если Не ПустаяСтрока(ВсяСекция) Тогда
				ВсяСекция = ФорматированныйКлюч + " " + ВсяСекция;
			КонецЕсли;
		КонецЕсли;	
		
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "["+ФорматированныйКлюч+"]", ВсяСекция);
	КонецЦикла;
	
	ТекстЗапросаВыборки = ШаблонЗапроса;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураБазСервераПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхКуб Тогда	
		НоваяВидимостьЭлементов("кмСоздатьБазуДанных,кмСоздатьТаблицу","кмЗапросКТаблице,кмВставкаДанных,кмСоздатькмИнитСхемыСКД");
	ИначеЕсли Элемент.ТекущиеДанные.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица Тогда
		НоваяВидимостьЭлементов("кмЗапросКТаблице,кмВставкаДанных,кмСоздатькмИнитСхемыСКД","кмСоздатьБазуДанных,кмСоздатьТаблицу");
	Иначе
		НоваяВидимостьЭлементов(,"кмЗапросКТаблице,кмСоздатьБазуДанных,кмСоздатьТаблицу,кмВставкаДанных,кмСоздатькмИнитСхемыСКД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяВидимостьЭлементов(ВидимыеЭлементы = "", НевидимыеЭлементы = "")
	
	МассивВидимых = СтрРазделить(ВидимыеЭлементы, ",", Ложь);
	МассивНевидимых = СтрРазделить(НевидимыеЭлементы, ",", Ложь);
	
	Для каждого Видимый из МассивВидимых Цикл
		Элементы[Видимый].Видимость = Истина;
	КонецЦикла;
	
	Для каждого НеВидимый из МассивНеВидимых Цикл
		Элементы[НеВидимый].Видимость = Ложь;
	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#Область ИнициализацияПеременных

кСтолбецБазы = БиблиотекаКартинок.Ресурс;
кБазаДанных = БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
кТаблицаБазы = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;

#КонецОбласти

