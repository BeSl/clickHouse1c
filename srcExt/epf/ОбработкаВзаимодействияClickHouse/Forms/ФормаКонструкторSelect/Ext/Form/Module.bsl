#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("СписокСтолбцов") Тогда
		ЗаполнитьТаблицуСтолбцов(Параметры.СписокСтолбцов);
	КонецЕсли;
	
	ПодключениеКСУБД = Параметры.тПодключение;
	ИмяТаблицы = Параметры.ИмяТаблицы;
	БД = Параметры.БД;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.FORMAT.СписокВыбора.ЗагрузитьЗначения(ВариантыФорматовОтветов());
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтолбцыТаблицы
&НаКлиенте
Процедура СтолбцыТаблицыАгрегатнаяФункцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.СтолбцыТаблицыАгрегатнаяФункция.СписокВыбора.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Обновляю список агрегатных функций", 15);
	ЗаполнитьАгрегатныеФункции();	
	Состояние("Обновляю список агрегатных функций", 100);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПеренестиВЗапрос(Команда)
	
	СекцииЗапроса = Новый Структура;
	СекцииЗапроса.Вставить("DISTINCT", ?(DISTINCT, "DISTINCT", ""));
	СекцииЗапроса.Вставить("COLUMS", Новый Массив);
	СекцииЗапроса.Вставить("tableName", ИмяТаблицы);
	СекцииЗапроса.Вставить("dbName", БД);
	СекцииЗапроса.Вставить("WHEREоб", WHERE);
	СекцииЗапроса.Вставить("FORMATоб", FORMAT);
	СекцииЗапроса.Вставить("GROUP_BYоб", Новый Массив);

	ШаблонСтрокиДляЗапроса = "%1 as %2";
	ЗаполнитьГруппировку = Ложь;
	
	Для каждого ПолеТаблицы из СтолбцыТаблицы Цикл
		Если не ПолеТаблицы.Выбрать Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПоля = "";
		
		Если ПустаяСтрока(ПолеТаблицы.АгрегатнаяФункция) Тогда
			ОписаниеПоля = СтрШаблон(ШаблонСтрокиДляЗапроса, ПолеТаблицы.ИмяСтолбца, ПолеТаблицы.Синоним); 
			СекцииЗапроса.GROUP_BYоб.Добавить(ПолеТаблицы.ИмяСтолбца);
		Иначе
			ЗаполнитьГруппировку = Истина;
			ОписаниеПоля = СтрШаблон(ШаблонСтрокиДляЗапроса, ПолеТаблицы.АгрегатнаяФункция+"("+ ПолеТаблицы.ИмяСтолбца +")", ПолеТаблицы.Синоним); 
		КонецЕсли;
		
		СекцииЗапроса.COLUMS.Добавить(ОписаниеПоля);
	КонецЦикла;
	
	Если Не ЗаполнитьГруппировку Тогда
		СекцииЗапроса.GROUP_BYоб.Очистить();
	КонецЕсли;
	
	Оповестить("Секции запроса выборки", СекцииЗапроса, "Выборка данных");
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыбор(Команда)
	
	УстановитьСнятьВыбор(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	УстановитьСнятьВыбор(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКОтбору(Команда)
	
	тДанные = Элементы.СтолбцыТаблицы.ТекущиеДанные;
	
	Если тДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОтбор(тДанные);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура УстановитьСнятьВыбор(НовоеЗначение)
	
	Для каждого стр из СтолбцыТаблицы Цикл
		стр.Выбрать = НовоеЗначение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтбор(тДанные)
	
	текОтбор = СокрЛП(WHERE);
	строкаОтбора = СформироватьОдноУсловиеГде(тДанные.ИмяСтолбца, тДанные.ТипДанных);
	Если ПустаяСтрока(текОтбор) Тогда
		WHERE = строкаОтбора;
	Иначе
		WHERE = WHERE + " 
		|AND 
		| "+строкаОтбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьОдноУсловиеГде(ИмяСтолбца, ТипДанных)
	
	Если стрНайти(НРег(ТипДанных),"datetime") Тогда
		Возврат СтрШаблон("%1 = %2", ИмяСтолбца,шаблонПривестиКДатеКХ());
	КонецЕсли;
	
	Возврат СтрШаблон("%1 = param", ИмяСтолбца);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция шаблонПривестиКДатеКХ()
	Возврат "toDateTime(param)";
КонецФункции


&НаСервере
Процедура ЗаполнитьТаблицуСтолбцов(СписокСтолбцов)
	СтолбцыТаблицы.Загрузить(ПолучитьИзВременногоХранилища(СписокСтолбцов));	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАгрегатныеФункции()	
	
	Попытка
		агрегатныеФункции = РеквизитФормыВЗначение("Объект").СписокАгрегатныхФункций(ПодключениеКСУБД);
		Элементы.СтолбцыТаблицыАгрегатнаяФункция.СписокВыбора.ЗагрузитьЗначения(агрегатныеФункции);	
	Исключение
		Сообщить("Ошибка заполнения списка агрегатных функций");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Функция ВариантыФорматовОтветов()
	
	ФорматыОтветов = Новый Массив;
	ФорматыОтветов.Добавить("JSON");
	ФорматыОтветов.Добавить("CSV");
	ФорматыОтветов.Добавить("XML");
	ФорматыОтветов.Добавить("TabSeparated");
	ФорматыОтветов.Добавить("TabSeparatedRaw");
	ФорматыОтветов.Добавить("TabSeparatedWithNames");
	ФорматыОтветов.Добавить("TabSeparatedWithNamesAndTypes");
	ФорматыОтветов.Добавить("Template");
	ФорматыОтветов.Добавить("CSVWithNames");
	ФорматыОтветов.Добавить("CustomSeparated");
	ФорматыОтветов.Добавить("Values");
	ФорматыОтветов.Добавить("Vertical");
	ФорматыОтветов.Добавить("VerticalRaw");
	ФорматыОтветов.Добавить("JSONString");
	ФорматыОтветов.Добавить("JSONCompact");
	ФорматыОтветов.Добавить("JSONCompactString");
	ФорматыОтветов.Добавить("JSONEachRow");
	ФорматыОтветов.Добавить("JSONEachRowWithProgress");
	ФорматыОтветов.Добавить("JSONStringEachRow");
	ФорматыОтветов.Добавить("JSONStringEachRowWithProgress");
	ФорматыОтветов.Добавить("JSONCompactEachRow");
	ФорматыОтветов.Добавить("JSONCompactEachRowWithNamesAndTypes");
	ФорматыОтветов.Добавить("JSONCompactStringEachRow");
	ФорматыОтветов.Добавить("JSONCompactStringEachRowWithNamesAndTypes");
	ФорматыОтветов.Добавить("TSKV");
	ФорматыОтветов.Добавить("Pretty");
	ФорматыОтветов.Добавить("PrettyCompact");
	ФорматыОтветов.Добавить("PrettyCompactMonoBlock");
	ФорматыОтветов.Добавить("PrettyNoEscapes");
	ФорматыОтветов.Добавить("PrettySpace");
	ФорматыОтветов.Добавить("Protobuf");
	ФорматыОтветов.Добавить("ProtobufSingle");
	ФорматыОтветов.Добавить("Avro");
	ФорматыОтветов.Добавить("Parquet");
	ФорматыОтветов.Добавить("Arrow");
	ФорматыОтветов.Добавить("ArrowStream");
	ФорматыОтветов.Добавить("RowBinary");
	ФорматыОтветов.Добавить("RowBinaryWithNamesAndTypes");
	ФорматыОтветов.Добавить("Native");
	ФорматыОтветов.Добавить("Null");
	ФорматыОтветов.Добавить("RawBLOB");
	
	возврат ФорматыОтветов;	
КонецФункции


#КонецОбласти