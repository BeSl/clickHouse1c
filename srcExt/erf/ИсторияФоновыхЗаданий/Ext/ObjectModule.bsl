
#Область ОписаниеПеременных
Перем АдресСервера, Порт, Логин, Пароль;
Перем ТипыЗначенийВнешнегоИсточника;
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ОтветСтрокой = ВыполнитьЗапросКСерверу(СобратьОтборВСтроки(КомпоновщикНастроек.Настройки.Отбор.Элементы));
	ТаблицаОтвета = ПрочитатьОтветВ_ТЗ(ОтветСтрокой);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки);
	
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("ТаблицаОтвета", ТаблицаОтвета));
	
    ДокументРезультат.Очистить();

	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВыполнитьЗапросКСерверу(СтрокиСекцииWhere)
	
	ШаблонЗапроса = "SELECT * 
	|FROM drkBase.logExtJob 
	|[WHERE 1=1]
	|FORMAT JSON";
	
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "[WHERE 1=1]", "WHERE "+СтрСоединить(СтрокиСекцииWhere," and "));
	
	HTTPСоединение = ИнициализироватьСоединениеСервера();
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	
	ФайлЗапрос = Новый ТекстовыйДокумент();
	ФайлЗапрос.УстановитьТекст(ТекстЗапроса);
	ФайлЗапрос.Записать(ИмяВремФайла, КодировкаТекста.UTF8);
	
	HTTPЗапросВнБД = Новый HTTPЗапрос();
	HTTPЗапросВнБД.УстановитьИмяФайлаТела(ИмяВремФайла);
	
	HTTPОтветВнБД = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапросВнБД);
	
	Если HTTPОтветВнБД.КодСостояния <> 200 Тогда
		ТекстИсключения = "Код состояния " 
							+ HTTPОтветВнБД.КодСостояния 
								+ Символы.ПС 
									+ HTTPОтветВнБД.ПолучитьТелоКакСтроку();
									
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Возврат HTTPОтветВнБД.ПолучитьТелоКакСтроку();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПривестиВСтроковоеЗначениеОтбора(ЗначениеОтбора)
	
	ПриведенноеЗначение = "";
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Дата") Тогда
		 ПриведенноеЗначение = "toDateTime('"+Формат(ЗначениеОтбора, "ДФ='yyyy-MM-dd ЧЧ:мм:сс'")+"')";
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СтандартнаяДатаНачала") Тогда
		 ПриведенноеЗначение = "toDateTime('"+Формат(ЗначениеОтбора.Дата, "ДФ='yyyy-MM-dd ЧЧ:мм:сс'")+"')";
		
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Булево") Тогда
		 ПриведенноеЗначение = Строка(?(ЗначениеОтбора, 1, 0));
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Число") Тогда
		 ПриведенноеЗначение = Формат(ЗначениеОтбора,"ЧРГ=' '; ЧН=0; ЧГ=0");
	Иначе
		ПриведенноеЗначение = ЗначениеОтбора;
	КонецЕсли;	
	
	Возврат ПриведенноеЗначение;
	
КонецФункции

Функция СвязьПолейВнешнейТаблицы()
	
	СоотвествиеИмен = Новый Соответствие;
	СоотвествиеИмен.Вставить("Период", "EventDate");
	СоотвествиеИмен.Вставить("ИмяЗадания", "JobName");
	СоотвествиеИмен.Вставить("РезультатВыполнения", "resultJob");
  	СоотвествиеИмен.Вставить("ОписаниеОшибки", "JobDescribe");
  	СоотвествиеИмен.Вставить("КоличествоОбработанныхЗаписей", "CountRecord");
  	СоотвествиеИмен.Вставить("ВремяВыполнения", "TimeJob");
  
  Возврат СоотвествиеИмен;
	
КонецФункции

Функция СобратьОтборВСтроки(ЭлементыОтбора)
	
	СтрокиСекцииWhere = новый Массив;
	
	Для Каждого ОтборКомпоновки Из ЭлементыОтбора Цикл
		Если ОтборКомпоновки.Использование  = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьПроцентВНачале = Ложь;
		ДобавитьПроцентВКонце = Ложь;
		
		Если ОтборКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
			Шаблон = "like(%1, '%2')";
			
			ДобавитьПроцентВНачале = Истина;
			ДобавитьПроцентВКонце = Истина;
		ИначеЕсли ОтборКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда							
			Шаблон = "%1 = %2";					
		ИначеЕсли ОтборКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда				
			Шаблон = "%1 > %2";			
		ИначеЕсли ОтборКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда							
			Шаблон = "%1 >= %2";			
		ИначеЕсли ОтборКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда				
			Шаблон = "%1 < %2%";			
		ИначеЕсли ОтборКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда							
			Шаблон = "%1 <= %2%";			
		ИначеЕсли ОтборКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда							
			Шаблон = "like(%1, '%2')";
			
			ДобавитьПроцентВКонце = Истина;
		Иначе
			ШаблонСообщения = "ВНИМАНИЕ!!! Для отбора %1 %2 Пропускаю ";
			Сообщить(СтрШаблон(ШаблонСообщения, ОтборКомпоновки.ПравоеЗначение, ОтборКомпоновки.ВидСравнения));
			Продолжить;
		КонецЕсли;
		
		ОтборСтрокой = ПривестиВСтроковоеЗначениеОтбора(ОтборКомпоновки.ПравоеЗначение);
		
		Если ДобавитьПроцентВНачале Тогда
			ОтборСтрокой = "%"+ОтборСтрокой;
		КонецЕсли;
		Если ДобавитьПроцентВКонце Тогда
			ОтборСтрокой = ОтборСтрокой + "%";
		КонецЕсли;
		
		СтрокаДоб = СтрШаблон(Шаблон, 
							СвязьПолейВнешнейТаблицы()[Строка(ОтборКомпоновки.ЛевоеЗначение)], 
							ОтборСтрокой);
							
		СтрокиСекцииWhere.Добавить(СтрокаДоб);
	КонецЦикла;
	
	Возврат СтрокиСекцииWhere;
	
КонецФункции

Функция ПрочитатьОтветВ_ТЗ(ОтветСтрокой)
	
	ЧтениеJS = Новый ЧтениеJSON;
	ЧтениеJS.УстановитьСтроку(ОтветСтрокой);
	ОтветСтруктурой = ПрочитатьJSON(ЧтениеJS);

	ОтветТаблицей = Новый ТаблицаЗначений;
	
	Для Каждого МетаИнфоОтвета Из ОтветСтруктурой.meta Цикл	
		ТипыЗначенийВнешнегоИсточника.Вставить(МетаИнфоОтвета.name, МетаИнфоОтвета.type);
	КонецЦикла;
	
	Для Каждого кз Из СвязьПолейВнешнейТаблицы() Цикл
		ОтветТаблицей.Колонки.Добавить(кз.Ключ);
	КонецЦикла;
	
	Для Каждого кз Из ОтветСтруктурой.data Цикл
		НоваяСтрокаДанных = ОтветТаблицей.Добавить();
		
		Для Каждого переводКолонок Из СвязьПолейВнешнейТаблицы() Цикл
			
			НоваяСтрокаДанных[переводКолонок.Ключ] = ПривестиЗначение(кз[переводКолонок.Значение], переводКолонок.Значение);
		КонецЦикла;
	КонецЦикла;

	Возврат ОтветТаблицей;
	
КонецФункции

Функция ИнициализироватьСоединениеСервера()
	
	Возврат Новый HTTPСоединение(АдресСервера, Порт, Логин, Пароль);
	
КонецФункции

Функция ПривестиЗначение(ЗначениеКолонки, ИмяКолонки)
	
	ПриведенноеЗначение = ЗначениеКолонки;
	ВнешнееИмяТипа = "";
	Если Не ТипыЗначенийВнешнегоИсточника.Свойство(ИмяКолонки, ВнешнееИмяТипа) Тогда
		Возврат ПриведенноеЗначение;
	КонецЕсли;
	
	Если СтрНайти(НРег(ВнешнееИмяТипа), "string")>0 Тогда
		ПриведенноеЗначение = ЗначениеКолонки;
	ИначеЕсли СтрНайти(НРег(ВнешнееИмяТипа), "date")>0 Тогда
		 ЗначениеКолонки = СтрЗаменить(ЗначениеКолонки, ":","");
		 ЗначениеКолонки = СтрЗаменить(ЗначениеКолонки, "-","");
		 ПриведенноеЗначение = Дата(СтрЗаменить(ЗначениеКолонки, " ",""));
	ИначеЕсли СтрНайти(НРег(ВнешнееИмяТипа), "int")>0 Тогда
		 ПриведенноеЗначение = Число(ЗначениеКолонки);
	КонецЕсли;
	
	Возврат ПриведенноеЗначение;
	
КонецФункции

#КонецОбласти

#Область Инициализация

АдресСервера = "192.168.1.102";
Порт = 8123;
Логин = "default";
Пароль = "";

ТипыЗначенийВнешнегоИсточника = Новый Структура;
#КонецОбласти