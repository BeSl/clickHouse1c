
#Область ОписаниеПеременных
Перем кСтолбецБазы;
Перем кБазаДанных;
Перем кТаблицаБазы;

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыПодключенияПоУмолчанию());
	Элементы.ФорматПринимаемыхДанных.СписокВыбора.ЗагрузитьЗначения(ВариантыФорматовОтветов());
	
	Операции_CH = Новый Массив;
	Операции_CH = ОбработкаОбъект().РеализованныеОперации();
	Элементы.ТекущаяОперация.СписокВыбора.ЗагрузитьЗначения(Операции_CH);
	Элементы.ГруппаНастройкаВыборкиДанных.Видимость = Ложь;	
	Элементы.ВозможныеПараметрыЗапроса.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ТекущаяОперацияПриИзменении(Элемент)
	
	ТекущаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

//#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//// Код процедур и функций
//#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗапросКБД(Команда)
	ИсполнитьЗапросК_CH(ПараметрыПодключения());
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтруктуруБДСервера(Команда)
	ЗаполнитьДеревоДаннымиСУБД(ПараметрыПодключения());
КонецПроцедуры

&НаКлиенте
Процедура ЗапросКТаблице(Команда)
	ЗаготовкаЗапросаКТаблице(ПараметрыПодключения());
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБазуДанных(Команда)
	ВызватьИсключение "Не реализовано";
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТаблицу(Команда)
	ВызватьИсключение "Не реализовано";
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПараметрыПодключения()
	            
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("АдресСервера", АдресСервера);
	ПараметрыПодключения.Вставить("Порт", Порт);
	ПараметрыПодключения.Вставить("Логин", Логин);
	ПараметрыПодключения.Вставить("Пароль", Пароль);	
	
	Возврат ПараметрыПодключения;
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Процедура ЗаготовкаЗапросаКТаблице(ПараметрыПодключения)
	
	тДанные = СтруктураБазСервера.НайтиПоИдентификатору(ТекущийЭлемент.ТекущаяСтрока);
	
	Таблица = "";
	БД = "";
	Столбцы = "нужно доделать";
	Если тДанные.Картинка = кБазаДанных Тогда
		БД = тДанные.Имя;
	ИначеЕсли тДанные.Картинка = кТаблицаБазы Тогда
		Таблица = тДанные.Имя;
		БД = тДанные.ПолучитьРодителя().Имя;
	КонецЕсли;	
	 
	 ШаблонЗапроса = ОбработкаОбъект().ШаблоныОпераций()["Выборка данных"];
	 ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ИмяБД%", БД);
	 ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ИмяТаблицы%", Таблица);
	 ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ИменаКолонок%", Столбцы);
	 ТекстЗапросаВыборки = ШаблонЗапроса;
	 
КонецПроцедуры

&НаСервере
Процедура ТекущаяОперацияПриИзмененииСервер()
	
	ЗаполнитьШаблонТекущейОперации(ТекущаяОперация);	
	
КонецПроцедуры

Процедура ЗаполнитьШаблонТекущейОперации(ВыбраннаяОперация)
	
	Шаблоны = ОбработкаОбъект().ШаблоныОпераций();
	
	Если Шаблоны.Получить(ВыбраннаяОперация) = Неопределено Тогда
		Элементы.ВозможныеПараметрыЗапроса.Видимость = Ложь;
		ВызватьИсключение "Такое действие мне не знакомо";
	КонецЕсли;
	
	ТекстЗапросаВыборки = Шаблоны[ВыбраннаяОперация];
	Элементы.ВозможныеПараметрыЗапроса.Видимость = Истина;
	Элементы.ВозможныеПараметрыЗапроса.СписокВыбора.ЗагрузитьЗначения(ОбработкаОбъект().ПараметрыЗапроса(ВыбраннаяОперация));
	Элементы.ФорматПринимаемыхДанных.Видимость =  (СтрНайти(ВыбраннаяОперация, "Выбрать") > 0);
	
КонецПроцедуры



&НаСервере
Процедура ИсполнитьЗапросК_CH(ПараметрыПодключения)
	
	ТипЗапроса = "post";
	//Если СтрНачинаетсяС(нРег(ТекстЗапросаВыборки), "select") Тогда
	//	ТипЗапроса = "get";
	//КонецЕсли;
	
	ОтветПоВыборке = ОбработкаОбъект().ВыполнитьПроизвольныйЗапрос(ПараметрыПодключения, ТекстЗапросаВыборки, ТипЗапроса);
	Сообщить(ОтветПоВыборке.КодСостояния);
	Сообщить(ОтветПоВыборке.ТелоОтвета);
	Если СтрНачинаетсяС(нРег(ТекстЗапросаВыборки), "select") Тогда
		ЧтениеJS = Новый ЧтениеJSON;
		ЧтениеJS.УстановитьСтроку(ОтветПоВыборке.ТелоОтвета);
		ОтветСтруктурой = ПрочитатьJSON(ЧтениеJS);
		ПодготовитьМакетСКД(ОтветСтруктурой);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьМакетСКД(ОтветСтруктурой)
	
	метаИнформацияСЗапроса = ОтветСтруктурой.meta;
	
	схемаКомпоновки = ОбработкаОбъект().ПолучитьМакет("СхемаКомпоновкиДляПросмотраДанных");
	
	ПоляСхемы = схемаКомпоновки.НаборыДанных.НаборДанных1.Поля;
	ЭлементыВыбора = схемаКомпоновки.ВариантыНастроек.Основной.Настройки.Выбор.Элементы;
	табДанных = Новый ТаблицаЗначений;
	
	Для каждого мИнф из метаИнформацияСЗапроса Цикл
		
		НовоеПоле = ПоляСхемы.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок = мИнф.name; 
		НовоеПоле.Поле = мИнф.name;  
		НовоеПоле.ПутьКДанным = мИнф.name;
		
		ПолеКД = ЭлементыВыбора.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКД.Заголовок = мИнф.name;
		ПолеКД.Использование = Истина;
		ПолеКД.Поле =  Новый ПолеКомпоновкиДанных(мИнф.name);
		
		табДанных.Колонки.Добавить(мИнф.name);
	КонецЦикла;
	
	Для каждого тДанные из ОтветСтруктурой.data Цикл
		ЗаполнитьЗначенияСвойств(табДанных.Добавить(), тДанные);
	КонецЦикла;
	
	СформироватьВтаблДокРезультатСКДНаСервере(схемаКомпоновки, табДанных);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьВтаблДокРезультатСКДНаСервере(Схема, ТаблицаДляНабора)
	
	//Настройки = Схема.ВариантыНастроек.Основной.Настройки.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Схема.ВариантыНастроек.Основной.Настройки);
	
	внНаборДанных = Новый Структура;
	внНаборДанных.Вставить("табДанных", ТаблицаДляНабора);
	
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, внНаборДанных,,Истина);
	
	//Очищаем поле табличного документа
    докРезультатЗапроса.Очистить();

	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(докРезультатЗапроса);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДаннымиСУБД(ПараметрыПодключения)
	
	ОбщаяТаблицаСУБД = ОбработкаОбъект().ИнформацияПоВсемБазамСУБД(ПараметрыПодключения);
	
	Если ПустаяСтрока(СокрЛП(ОбщаяТаблицаСУБД)) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураБазСервера.ПолучитьЭлементы().Очистить();
	
	СписокБаз = ОбщаяТаблицаСУБД.Скопировать();
	СписокБаз.Свернуть("database");
	
	ТаблицыБД = ОбщаяТаблицаСУБД.Скопировать();
	ТаблицыБД.Свернуть("database, table");	
	Для каждого БазаДанных из СписокБаз Цикл
		БД = СтруктураБазСервера.ПолучитьЭлементы().Добавить();	
		БД.Имя = БазаДанных.database;
		БД.Картинка = кБазаДанных;
		ЗаполнитьТаблицыПоВыборке(ОбщаяТаблицаСУБД, ТаблицыБД, БД);
	КонецЦикла;
	
	ВыборкаЗапроса = ОбработкаОбъект().ЗапросСписокВсехБД(ПараметрыПодключения);
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ВыборкаЗапроса);
	Структура = ПрочитатьJSON(Чтение);
	
	Для каждого тТаблица из Структура.data Цикл
		Если СписокБаз.НайтиСтроки(Новый Структура("database", тТаблица.name)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		БД = СтруктураБазСервера.ПолучитьЭлементы().Добавить();	
		БД.Имя = тТаблица;
		БД.Картинка = кБазаДанных;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыПоВыборке(ТаблицаСУБД, ТаблицыБД, ТекущаяБД)

	Для каждого текТаблица из ТаблицыБД.НайтиСтроки(Новый Структура("database", ТекущаяБД.Имя)) Цикл
		Таблица = ТекущаяБД.ПолучитьЭлементы().Добавить();
		Таблица.Имя = текТаблица.table;
		Таблица.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
		
		Для каждого СтолбцыТаблицы из ТаблицаСУБД.НайтиСтроки(Новый Структура("database, table", ТекущаяБД.Имя, Таблица.Имя)) Цикл
			ОписаниеСтолбца = Таблица.ПолучитьЭлементы().Добавить();
			ОписаниеСтолбца.Имя = СтолбцыТаблицы.name;
			ОписаниеСтолбца.Картинка = кСтолбецБазы;
			ОписаниеСтолбца.ТипСтолбца = СтолбцыТаблицы.type;
		КонецЦикла;
		
	КонецЦикла;	
	
	
	
КонецПроцедуры

Функция ПараметрыПодключенияПоУмолчанию()
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("АдресСервера", "192.168.1.102");
	ПараметрыПодключения.Вставить("Порт", 8123);
	ПараметрыПодключения.Вставить("Логин", "default");
	ПараметрыПодключения.Вставить("Пароль", "");	
	
	Возврат ПараметрыПодключения;
	
КонецФункции

Функция ВариантыФорматовОтветов()
	
	ФорматыОтветов = Новый Массив;
	ФорматыОтветов.Добавить("TabSeparated");
	ФорматыОтветов.Добавить("TabSeparatedRaw");
ФорматыОтветов.Добавить("TabSeparatedWithNames");
ФорматыОтветов.Добавить("TabSeparatedWithNamesAndTypes");
ФорматыОтветов.Добавить("Template");
ФорматыОтветов.Добавить("CSV");
ФорматыОтветов.Добавить("CSVWithNames");
ФорматыОтветов.Добавить("CustomSeparated");
ФорматыОтветов.Добавить("Values");
ФорматыОтветов.Добавить("Vertical");
ФорматыОтветов.Добавить("VerticalRaw");
ФорматыОтветов.Добавить("JSON");
ФорматыОтветов.Добавить("JSONString");
ФорматыОтветов.Добавить("JSONCompact");
ФорматыОтветов.Добавить("JSONCompactString");
ФорматыОтветов.Добавить("JSONEachRow");
ФорматыОтветов.Добавить("JSONEachRowWithProgress");
ФорматыОтветов.Добавить("JSONStringEachRow");
ФорматыОтветов.Добавить("JSONStringEachRowWithProgress");
ФорматыОтветов.Добавить("JSONCompactEachRow");
ФорматыОтветов.Добавить("JSONCompactEachRowWithNamesAndTypes");
ФорматыОтветов.Добавить("JSONCompactStringEachRow");
ФорматыОтветов.Добавить("JSONCompactStringEachRowWithNamesAndTypes");
ФорматыОтветов.Добавить("TSKV");
ФорматыОтветов.Добавить("Pretty");
ФорматыОтветов.Добавить("PrettyCompact");
ФорматыОтветов.Добавить("PrettyCompactMonoBlock");
ФорматыОтветов.Добавить("PrettyNoEscapes");
ФорматыОтветов.Добавить("PrettySpace");
ФорматыОтветов.Добавить("Protobuf");
ФорматыОтветов.Добавить("ProtobufSingle");
ФорматыОтветов.Добавить("Avro");
ФорматыОтветов.Добавить("Parquet");
ФорматыОтветов.Добавить("Arrow");
ФорматыОтветов.Добавить("ArrowStream");
ФорматыОтветов.Добавить("RowBinary");
ФорматыОтветов.Добавить("RowBinaryWithNamesAndTypes");
ФорматыОтветов.Добавить("Native");
ФорматыОтветов.Добавить("Null");
ФорматыОтветов.Добавить("XML");
ФорматыОтветов.Добавить("RawBLOB");
возврат ФорматыОтветов;	
КонецФункции

	кСтолбецБазы = БиблиотекаКартинок.Ресурс;
	кБазаДанных = БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
	кТаблицаБазы = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
#КонецОбласти
